generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique // clerk user id
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String? // Combined industry-subindustry (e.g., "tech-software-development")
  subIndustry     String? // User's specialization/sub-industry
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Profile fields
  bio              String?
  experience       Int? // Years of experience
  targetRole       String? // User's target job/role for skill gap analysis
  leetcodeUsername String? // User's LeetCode username
  // Relations
  skills           String[] // Array of skills
  assessments      Assessment[]
  resume           Resume[] // Allow multiple resumes per user
  coverLetter      CoverLetter[]
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float // Overall quiz score
  questions      Json[] // Array of {question, answer, userAnswer, isCorrect}
  category       String // "Technical", "Behavioral", etc.
  improvementTip String? // AI-generated improvement tip
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id     String @id @default(cuid())
  userId String // Remove unique constraint to allow multiple resumes per user
  user   User   @relation(fields: [userId], references: [id])

  title   String // New: Resume title

  // Contact Information
  contactInfo Json // { name, location, phone, email, linkedin?, github? }

  // Resume Sections
  skills       String @db.Text
  experience   Json[] // Array of { title, organization, startDate, endDate, current }
  education    Json[] // Array of { degree, institution, fieldOfStudy?, startDate, endDate, current, gpa? }
  projects     Json[] // Array of { title, organization, startDate, endDate, current, links: [{label, url}] }
  achievements Json[] // Array of { text, url? }

  // Legacy field for backward compatibility
  content String? @db.Text // Markdown content (deprecated)

  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Add index for efficient queries
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String // Markdown content
  jobDescription String?
  companyName    String // Name of the company applying to
  jobTitle       String // Position applying for
  
  // Applicant information
  applicantName     String?
  applicantEmail    String?
  applicantPhone    String?
  applicantLocation String?
  applicantLinkedin String?
  
  // Professional background
  yearsOfExperience   String?
  keySkills          String?
  relevantExperience String?
  
  // Cover letter customization
  tone String? // professional, enthusiastic, confident, humble
  focus String? // experience, skills, culture, growth
  
  status         String   @default("draft") // draft, completed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id       String @id @default(cuid())
  industry String @unique // The industry this data belongs to (e.g., "tech-software-development")

  // Users in this industry
  users User[]

  // Salary data
  salaryRanges Json[] // Array of { role: string, min: float, max: float, median: float, location: string? }

  // Industry trends
  growthRate  Float // Industry growth rate
  demandLevel String // "High", "Medium", "Low"
  topSkills   String[] // Most in-demand skills

  // Market conditions
  marketOutlook String // "Positive", "Neutral", "Negative"
  keyTrends     String[] // Array of current industry trends

  // Learning suggestions
  recommendedSkills String[] // Skills recommended for the industry

  lastUpdated DateTime @default(now())
  nextUpdate  DateTime // Scheduled update time

  @@index([industry])
}
